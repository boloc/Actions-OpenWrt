name: TigWrt Builder From ImmortalWrt-R4SE

# on:
#   push:
#     branches:
#       - main
on:
  # 手动触发
  workflow_dispatch:
  # 定时触发
  schedule:
    - cron: 0 */72 * * *
  # 通过外部事件[Source Code Update ImmortalWrt]触发构建ImmortalWrt脚本
  repository_dispatch:
    types: [Source Code Update ImmortalWrt]


env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  # ARGON_URL: https://github.com/jerrykuku/luci-theme-argon.git
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config.R4SE
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Check Server Performance
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      # 配置环境
      - name: Initialization environment
        env:
          # 非交互式安装
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) || true
          sudo docker image prune --all --force
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev btrfs-progs libfuse-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      # clone源码并且创建软链
      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      # 缓存，加快openwrt编译
      - name: Cache
        uses: stupidloud/cachewrtbuild@main # https://github.com/stupidloud/cachewrtbuild
        with:
          ccache: 'true' # 检查是否缓存 ccache
          #清空缓存
          clean: "false" # 'false' 默认值
          prefix: ${{ github.workspace }}/openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt && pwd
          $GITHUB_WORKSPACE/$DIY_P1_SH

      # 更新 feeds(安装两次包管理，预防第一次安装失败，有些漏掉)
      - name: Update & Install feeds
        working-directory: ./openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          ./scripts/feeds install -a

      # 加载配置
      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      # 下载包
      - name: Download package
        id: package
        working-directory: ./openwrt
        # 添加工具链初始化步骤
        run: |
          make defconfig
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      # 编译固件
      - name: Compile the firmware
        id: compile
        working-directory: ./openwrt
        run: |
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      # 删除多余内容
      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages *.buildinfo *.manifest *.bin sha256sums
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      # 创建版本releases
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=R4SE_$(date +"%Y%m%d%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "ImmortalWrt build on $(date +"%Y.%m.%d-%H%M")" > release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Debug upload parameters
        run: |
          echo "Tag Name: ${{ steps.tag.outputs.release_tag }}"
          echo "Body Path: release.txt"
          echo "FIRMWARE path: ${{ env.FIRMWARE }}"
          ls -la ${{ env.FIRMWARE }}/*

      # 上传固件到发布
      - name: Upload firmware to release
        # (2024-12-28为止,master版本有问题,v2版本正常，具体看issue)
        # uses: softprops/action-gh-release@master # https://github.com/softprops/action-gh-release
        uses: softprops/action-gh-release@v2 # https://github.com/softprops/action-gh-release
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*
          # verbose: true # 添加 verbose 选项以获取更多调试信息

      # 清除工作流
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main # https://github.com/Mattraks/delete-workflow-runs
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 2
          keep_minimum_runs: 2

      # 移除老版本releases
      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@master # https://github.com/dev-drprasad/delete-older-releases (项目已经不再维护,但是没更好的替代)
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3 # 指定要保留的最新版本
          delete_tags: true # 删除tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List firmware files
        run: |
          echo "Listing files in firmware directory:"
          ls -la ${{ env.FIRMWARE }}

      - name: Debug release files
        run: |
          echo "Files to be uploaded:"
          ls -la ${{ env.FIRMWARE }}
          echo "Release tag: ${{ steps.tag.outputs.release_tag }}"
          cat release.txt
